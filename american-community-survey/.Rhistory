lst <- as.list(strsplit(str, ";")[[1]])
for (j in 1:length(lst)){
use_list[[length(use_list)+1]] <- lst[[j]]
if (lst[[j]] == "Attend workshops") {
workshop_interest[[i]] <- TRUE
}
if (lst[[j]] == "Tinker or pursue short-term experiments") {
tinker_interest[[i]] <- TRUE
}
if (lst[[j]] == "Pursue a self-directed long-term project") {
project_interest[[i]] <- TRUE
}
if (lst[[j]] == "Develop ideas related to a start-up company") {
startup_interest[[i]] <- TRUE
}
}
}
use <- sv[,2]
use_list <- list()
workshop_interest <- logical(length(use))
project_interest <- logical(length(use))
tinker_interest <- logical(length(use))
startup_interest <- logical(length(use))
#create a list of the different uses entered in the survey
for (i in 1:length(use)){
str <- as.character(use[i])
lst <- as.list(strsplit(str, ";")[[1]])
for (j in 1:length(lst)){
use_list[[length(use_list)+1]] <- lst[[j]]
if (lst[[j]] == "Attend workshops") {
workshop_interest[[i]] <- TRUE
}
if (lst[[j]] == "Tinker or pursue short-term experiments") {
tinker_interest[[i]] <- TRUE
}
if (lst[[j]] == "Pursue a self-directed long-term project") {
project_interest[[i]] <- TRUE
}
if (lst[[j]] == "Develop ideas related to a start-up company") {
startup_interest[[i]] <- TRUE
}
}
}
## of the people who will go to workshops, but do not have plans for projects
## how much will they pay?
## add column on workshop interest
sv <- cbind(sv,workshop_interest, project_interest, tinker_interest, startup_interest)
dim(sv)
## take just unique elements
short_list <- unique(use_list)
library(dplyr)
library(plyr)
## read in data
setwd("/home/callen/Documents/space-survey")
sv <- read.csv("Survey.csv")
## Total number of responses:
tot <- dim(sv)[[1]]
## Total number who have left their email addresses
## column 13 is the email address column, blanks are ""
emails <- sum(sv[,13] != "")
use <- sv[,2]
use_list <- list()
workshop_interest <- logical(length(use))
project_interest <- logical(length(use))
tinker_interest <- logical(length(use))
startup_interest <- logical(length(use))
#create a list of the different uses entered in the survey
for (i in 1:length(use)){
str <- as.character(use[i])
lst <- as.list(strsplit(str, ";")[[1]])
for (j in 1:length(lst)){
use_list[[length(use_list)+1]] <- lst[[j]]
if (lst[[j]] == "Attend workshops") {
workshop_interest[[i]] <- TRUE
}
if (lst[[j]] == "Tinker or pursue short-term experiments") {
tinker_interest[[i]] <- TRUE
}
if (lst[[j]] == "Pursue a self-directed long-term project") {
project_interest[[i]] <- TRUE
}
if (lst[[j]] == "Develop ideas related to a start-up company") {
startup_interest[[i]] <- TRUE
}
}
}
## add logical vectors indicating each users interest in a subset of uses
sv <- cbind(sv,workshop_interest, project_interest, tinker_interest, startup_interest)
## take just unique elements
short_list <- unique(use_list)
tally <- vector(mode = "integer", length(short_list))
## classify uses from each respondant
for (i in 1:length(short_list)) {
tally[[i]] <- sum(match(use_list, short_list[[i]]), na.rm = TRUE)
}
## How much are users willing to pay?
money <- sv[[12]]
is_answered <- money !=""
money <- money[is_answered]
money <- revalue(money, c(">$300"="300","<$20"="20", "$30"="30",
"$40"="40","$50"="50", "$75"="75",
"$100"="100", "$150"="150"))
money <- as.numeric(as.character(money))
barplot(table(money), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
projects <- filter(sv,sv[[3]] != "")
serious_projects <- filter(projects, serious)
serious_money <- serious_projects[[12]]
serious_money <- serious_money[serious_money !=""]
serious_money <- revalue(serious_money, c(">$300"="300","<$20"="20", "$30"="30",
"$40"="40","$50"="50", "$75"="75",
"$100"="100", "$150"="150"))
serious_money <- as.numeric(as.character(serious_money))
barplot(table(serious_money), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
# User-generated list of long-term projects:
#indexes of just those judged to be "serious"
serious <- c(T,T,T,T,T,F,F,F,F,F,T,T,T,F,F,T,T,F,T)
projects <- filter(sv,sv[[3]] != "")
serious_projects <- filter(projects, serious)
serious_money <- serious_projects[[12]]
serious_money <- serious_money[serious_money !=""]
serious_money <- revalue(serious_money, c(">$300"="300","<$20"="20", "$30"="30",
"$40"="40","$50"="50", "$75"="75",
"$100"="100", "$150"="150"))
serious_money <- as.numeric(as.character(serious_money))
barplot(table(serious_money), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
## of the people who will go to workshops, but do not have plans for projects
## how much will they pay?
filter(sv, sv$workshop_interest, !sv$project_interest)
## of the people who will go to workshops, but do not have plans for projects
## how much will they pay?
wnp <- filter(sv, sv$workshop_interest, !sv$project_interest)
wnp_money <- wnp[[12]]
table(wnp_money)
sv[[12]] <- revalue(sv[[12]], c(">$300"="300","<$20"="20", "$30"="30",
"$40"="40","$50"="50", "$75"="75",
"$100"="100", "$150"="150")))
## revalue money factors
sv[[12]] <- revalue(sv[[12]], c(">$300"="300","<$20"="20", "$30"="30",
"$40"="40","$50"="50", "$75"="75",
"$100"="100", "$150"="150"))
sv[[12]]
money <- sv[[12]]
is_answered <- money !=""
money <- money[is_answered]
money <- as.numeric(as.character(money))
barplot(table(money), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
projects <- filter(sv,sv[[3]] != "")
serious_projects <- filter(projects, serious)
serious_money <- serious_projects[[12]]
serious_money <- serious_money[serious_money !=""]
serious_money <- as.numeric(as.character(serious_money))
barplot(table(serious_money), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
## of the people who will go to workshops, but do not have plans for projects
## how much will they pay?
wnp <- filter(sv, sv$workshop_interest, !sv$project_interest, !sv$tinker_interest, !sv$startup_interest)
barplot(table(wnp[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
sv[[12]] <- as.numeric(as.character(sv[[12]]))
barplot(table(wnp[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
wnp[[12]]
## of the people who will go to workshops, but do not have plans for projects
## how much will they pay?
wnp <- filter(sv, sv$workshop_interest, !sv$project_interest, !sv$tinker_interest, !sv$startup_interest)
barplot(table(wnp[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
## of the people who are interested in start up companies, how much are they willing to pay?
st <- filter(sv, sv$startup_interest)
barplot(table(st[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
length(st)
sv$startup_interest
sum(sv$startup_interest)
length(sv$startup_interest)
## of the people who are interested in tinkering, but not in long term projects or start up companies
## how much are they wiling to pay per month?
tink <- filter(sv, tinker_interest, !project_interest, !sv$startup_interest)
barplot(table(sv[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
barplot(table(tink[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
## of the people who are interested in projects, how much are they willing to pay?
## not necessarily "serious" projects
proj <- filter(sv, sv$project_interest)
barplot(table(proj[[12]]), axes = TRUE, xlab = "Max monthly fee ($)", ylab = "# responses")
names(sv)
## LAB LOCATION
## where is the ideal location for the lab?
loc <- sv[[10]]
length(sv[[10]])
sv[[1]][[10]]
sv[[10]][[1]]
loc < sv[[10]][[1]]
loc <- sv[[10]][[1]]
loc <- as.list(strsplit(str, ";")[[1]])
loc
names(sv[10])
loc <- sv[[10]][[1]]
loc
loc <- as.list(strsplit(loc, ";")[[1]])
loc <- as.character(sv[[10]][[i]])
loc <- as.character(sv[[10]][[1]])
loc <- as.list(strsplit(loc, ";")[[1]])
loc
loc_list <- list()
for (i in 1:length(sv[[10]])){
loc <- as.character(sv[[10]][[i]])
loc <- as.list(strsplit(loc, ";")[[1]])
for (j in 1:length(loc)){
loc_list[[length(loc_list) + 1]] <- loc[[j]]
}
}
loc_list
loc
is.empty(loc)
is.null(loc)
length(loc)
loc_list <- list()
for (i in 1:length(sv[[10]])){
loc <- as.character(sv[[10]][[i]])
loc <- as.list(strsplit(loc, ";")[[1]])
if (length(loc) > 0) {
for (j in 1:length(loc)){
loc_list[[length(loc_list) + 1]] <- loc[[j]]
}
}
}
length(loc_list)
short_loc <- unique(loc_list)
length(short_loc)
table(loc_list)
tally <- vector(mode = "integer", length(short_list))
for (i in 1:length(short_list)) {
tally[[i]] <- sum(match(use_list, short_list[[i]]), na.rm = TRUE)
}
table(tally)
short_loc
tally <- vector(mode = "integer", length(short_loc))
for (i in 1:length(short_loc)) {
tally[[i]] <- sum(match(loc_list, short_loc[[i]]), na.rm = TRUE)
}
table(tally)
legnth(short-loc)
legnth(short_loc)
length(short_loc)
## revalue money factors
sv[[12]] <- revalue(sv[[12]], c(">$300"="300","<$20"="20", "$30"="30",
"$40"="40","$50"="50", "$75"="75",
"$100"="100", "$150"="150"))
barplot(tally, names.arg = 1:length(short_loc))
names(sv)
rg_list <- list()
for (i in 1:length(sv[[5]])) {
reagents <- trimws(sv[[5]][[i]], which = c("right"))
if (reagents != ""){
rg_list[[length(rg_list) + 1]] <- reagents[[1]]
}
}
for (i in 1:length(rg_list)){
print(format(rg_list[[i]]))
}
names(sv)
rs_list <- list()
for (i in 1:length(sv[[7]])) {
resources <- trimws(sv[[7]][[i]], which = c("right"))
if (resources != ""){
rg_list[[length(rs_list) + 1]] <- resources[[1]]
}
}
for (i in 1:length(rs_list)){
print(format(rs_list[[i]]))
}
length(sv[[7]])
i
rs_list <- list()
for (i in 1:length(sv[[7]])) {
resources <- trimws(sv[[7]][[i]], which = c("right"))
if (resources != ""){
rs_list[[length(rs_list) + 1]] <- resources[[1]]
}
}
for (i in 1:length(rs_list)){
print(format(rs_list[[i]]))
}
devtools::install_github("rstudio/rmarkdown")
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/rmarkdown")
install.packages("tinytex")
library(tinytex)
devtools::install_github(c('yihui/tinytex', 'rstudio/rmarkdown'))
tinytex::install_tinytex()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
getwd()
setwd("/home/callen/Documents")
dir
dir()
setwd("./JHU-data-science-assignments")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", community.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "community.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf", "community-code-book.pdf")
setwd("./american-community-survey")
getwd()
dir()
acs <- read.csv("community.csv")
head(acs$VAL)
length(acs$VAL)
sum(acs$VAL == 24)
?sum
sum(acs$VAL == 24, na.rm = TRUE)
head(acs$FES)
head(acs$FES,20)
head(acs$FES,50)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "natural-gas.xlsx")
read.csv("natural-gas.csv")
dir()
read.csv("natural-gas.xlsx")
install.package("xlsx")
install.packages("xlsx")
library(xlsx)
install.Packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(rJava)
install.packages("rJava")
install.packages("xlsx")
library(rJava)
library(xlsx)
dir()
read.xlsx("natural-gas.xlsx")
?read.xlsx
read.xlsx("natural-gas.xlsx",1)
natgas <- read.xlsx("natural-gas.xlsx",1)
head(natgas)
natgas[[18]]
natgas[[7]]
natgas[[15]]
?read.xlsx
rm(natgas)
data <- read.xlsx("natural.gas", 1, rowIndex =18:23, colIndex = 7:15)
data <- read.xlsx("natural-gas", 1, rowIndex =18:23, colIndex = 7:15)
dir()
data <- read.xlsx("natural-gas.xlsx", 1, rowIndex =18:23, colIndex = 7:15)
names(data)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(data$Zip*data$Ext,na.rm=T)
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal = Ture)
doc <- xmlTreeParse(url, useInternal = True)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "baltimore-rest.xml")
doc <- xmlTreeParse("baltimore-rest.xml", useInternal = True)
doc <- xmlTreeParse("baltimore-rest.xml", useInternal = TRUE)
class(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
head(doc)
head(rootNode)
names(rootNode)
rootNode[[1]]
xpathSApply(doc, "//zipcode", xmlValue)
zips <- xpathSApply(doc, "//zipcode", xmlValue)
length(zips)
sum(zips == "21231")
?fread
## import data.table library
library(data.table)
?fread
## download community data from Idaho in 2006
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url, "community2006.csv")
dt <- fread("community2006.csv")
class(dt)
tables()
install.packages("tictoc")
library(tictoc)
?`tictoc-package`
tic(msg = "time for computation")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
toc()
tic(msg = "time for computation")
sapply(split(DT$pwgtp15,DT$SEX),mean)
toc()
tic(msg = "time for computation")
DT[,mean(pwgtp15),by=SEX]
toc()
tic(msg = "time for computation")
mean(DT$pwgtp15,by=DT$SEX)
toc()
tic(msg = "time for computation")
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
toc()
tic(msg = "time for computation")
tapply(DT$pwgtp15,DT$SEX,mean)
toc()
?system.time
## create a new datatable
dt <- data.table(A=1:6, B= c("A","B","C"), C = rnorm(6), D = TRUE)
dt
## subset the datatable
dt[1:3, mean(dt$C)]
## subset the datatable
dt[2:5, mean(dt$C)]
## subset the datatable
dt[dt[2:5], mean(dt$C)]
mean(dt$C)
!dt$D
dt[1:4,]
dt[,1:3]
?sqldf
library(RMySQL)
?sqldf
install.packages("sqldf")
## here is a different way to do it using the XML package
library(XML)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
htmlCode <- htmlTreeParse(url, useInternal = TRUE)
xpathSApply(htmlCode, //title, xmlValue)
xpathSApply(htmlCode, "//title", xmlValue)
## open connection to url
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
## read lines of html code
htmlLines <- readlines(con)
## read lines of html code
htmlLines <- read.lines(con)
## read lines of html code
html-lines <- readLines(con)
## read lines of html code
html_lines <- readLines(con)
close(con)
length(html_lines)
html_lines[[1]]
html_lines[[2]]
html_lines[[10]]
?nchar
nchar(html_lines[[10]])
nchar(html_lines[[20]])
nchar(html_lines[[30]])
nchar(html_lines[[100]])
close(con)
## another demo of reading in data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url, "noaa-data.for")
fr <- fread("noaa-data.for")
fr <- read("noaa-data.for")
?read.fwf
fr <- read.fwf("noaa-data.for")
fr <- read.fwf("noaa-data.for", 9)
fr <- read.fwf("noaa-data.for", 1)
head(fr)
fr <- read.fwf("noaa-data.for", 2)
head(fr)
fr <- read.fwf("noaa-data.for", 9)
head(fr)
fr <- read.fwf("noaa-data.for", 1)
head(fr)
head(fr,20)
fr <- read.fwf("noaa-data.for", c(9,8,8,8,8))
head(fr)
fr <- read.fwf("noaa-data.for", c(9,8,8,8,8), skip=4)
head(fr)
fr <- read.fwf("noaa-data.for", c(9,8,8,8,8), skip=5)
head(fr)
fr <- read.fwf("noaa-data.for", c(9,4,4,4,4,4,4,4,4), skip=5)
head(fr)
fr <- read.fwf("noaa-data.for", c(10,4,4,4,4,4,4,4,4), skip=5)
head(fr)
head(fr$V1)
head(fr$V2)
fr <- read.fwf("noaa-data.for", c(10,9,4,4,4,4,4,4,4), skip=4)
head(fr)
fr <- read.fwf("noaa-data.for", c(10,9,4,9,4,9,4,9,4), skip=4)
head(fr)
head(fr$V4)
sum(fr$V4)
library(dplyr)
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean = mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unqiue > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
quit()
